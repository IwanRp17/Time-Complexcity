
#1.constant O(1)
# constant time adalah suatu fungsi yang dimana hanya memerlukan satu eksekusi saja atau sekali jalan
int constant(){
int a=10;
int b=5;
hasil =A+B;
}
#2.logaritmich O(log n)
# logaritmich time adalah fungsi untuk memperpendek eksekusi dari jumlah n yang dinputkan dari user untuk mencari nilai yang diinginkan user (binary search)  
#include <string.h>
int logaritmich() {
int pertama,akhir,tengah,hitung,n;
int array[10]={10,21,25,35,36,47,58,69,72,80};
hitung=10;
printf("[10] [21] [25] [35] [36] [47] [58] [69] [72] [80]\n");
printf("masukkan n yang ingin anda cari=");
scanf("%d",&n);

pertama=0;
akhir=hitung-1;
tengah=(pertama+akhir)/2;
while (pertama<=akhir){
    if (array[tengah]<n)
        pertama=tengah+1;
    
    else if(array[tengah]==n){
        printf("index ke=%d",tengah+1);
        break;
    }
    else
    akhir=tengah-1;
    tengah=(pertama+akhir)/2;
}
if (pertama>akhir)
printf("nomor yang anda pilih salah");
}
#3.linearO(n)
# linear time adalah fungsi yang jumlah eksekusi nya sama dengan jumlah inputan dari user  
int linear(int n){ 
hasil=0
for(i=1;i<n;i++)
hasil++;
}
#4. quadratic O (nÂ²)
#quadratic time sama seperti fungsi linear time namun perbedaan nya waktu untuk mengeksekusinya naik 2 kali lipat .
int quadratic(int n){
    printf("masukkan n=");
    scanf("%d",&n);
for(int a=1;a<=n;a++)
 for(int b=1;b<=n;b++)
 printf("%d * %d=%d\n",a,b,a*b); 
}
#5. linearmatich (n log n)
#linearmatich time dapat dikatakan adalah kombinasi dari linear dan logaritmic dimana di dalam fungsi tersebut O(n) dan O(log n) berjalan bersamaan
int linearmathic() {
    int n=5;
    for(int i = 0; i < n; i++){//O(n)
  for(int j = 1; j < n; j = j * 2){//{log n}
    printf("i=%d ",i);
    printf("j=%d\n",j);
  }
    }
}
